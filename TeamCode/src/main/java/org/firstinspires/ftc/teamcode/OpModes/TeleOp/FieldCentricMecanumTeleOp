package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;

@TeleOp
public class FieldCentricMecanumTeleOp extends LinearOpMode {
    @Override
    public void runOpMode() throws InterruptedException {
        // Declare our motors
        // Make sure your ID's match your configuration
        DcMotor frontLeftMotor = hardwareMap.dcMotor.get("fldrive");
        DcMotor backLeftMotor = hardwareMap.dcMotor.get("bldrive");
        DcMotor frontRightMotor = hardwareMap.dcMotor.get("frdrive");
        DcMotor backRightMotor = hardwareMap.dcMotor.get("brdrive");

        // Reverse the right side motors. This may be wrong for your setup.
        // If your robot moves backwards when commanded to go forwards,
        // reverse the left side instead.
        // See the note about this earlier on this page.
        frontRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        backRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);

        // Retrieve the IMU from the hardware map
        IMU imu = hardwareMap.get(IMU.class, "imu");
        // Adjust the orientation parameters to match your robot
        IMU.Parameters parameters = new IMU.Parameters(new RevHubOrientationOnRobot(
                RevHubOrientationOnRobot.LogoFacingDirection.UP,
                RevHubOrientationOnRobot.UsbFacingDirection.FORWARD));
        // Without this, the REV Hub's orientation is assumed to be logo up / USB forward
        imu.initialize(parameters);

        waitForStart();

        if (isStopRequested()) return;


        while (opModeIsActive()) {
            double strafe = gamepad1.left_stick_y; 
            double turn = -gamepad1.right_stick_x; // Remember, Y stick value is reversed
            double drive = -gamepad1.left_stick_x; 

            // This button choice was made so that it is hard to hit on accident,
            // it can be freely changed based on preference.
            // The equivalent button is start on Xbox-style controllers.
            if (gamepad1.options) {
                imu.resetYaw();

            }

            double botHeading = imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.RADIANS);

            // Rotate the movement direction counter to the bot's rotation
            double rotX = drive * Math.cos(botHeading) - strafe * Math.sin(botHeading);
            double rotY = drive * Math.sin(botHeading) + strafe * Math.cos(botHeading);

            rotX = rotX * 1.1;  // Counteract imperfect strafing
            // Denominator is the largest motor power (absolute value) or 1
            // This ensures all the powers maintain the same ratio,
            // but only if at least one is out of the range [-1, 1]
            double denominator = Math.max(Math.abs(strafe) + Math.abs(drive) + Math.abs(turn), 1);
            double frontLeftPower = (rotY + rotX + turn) / denominator;
            double backLeftPower = (rotY - rotX + turn) / denominator;
            double frontRightPower = (rotY - rotX - turn) / denominator;
            double backRightPower = (rotY + rotX - turn) / denominator;
         /*   
            double frontLeftPower = Range.clip(drive + turn + strafe, -1, 1);
            double backLeftPower = Range.clip(drive + turn - strafe, -1, 1);
            double frontRightPower = Range.clip(drive - turn - strafe, -1, 1);
            double backRightPower = Range.clip(drive - turn + strafe, -1, 1);
            */
            double slow = 0.65;
            frontLeftMotor.setPower(frontLeftPower * slow);
            backLeftMotor.setPower(backLeftPower * slow);
            frontRightMotor.setPower(frontRightPower * slow);
            backRightMotor.setPower(backRightPower * slow);
            
            telemetry.update();
        }
    }
}
